// label to the external code generated by the kernel main function
.extern kernel_main

// Makes the start label global accessable for the linker to use
.global start

// GRUB Multiboot constants
.set MB_MAGIC, 0x1BADB002 // This is a 'magic' constant that GRUB will use to detect our kernel's location.
.set MB_FLAGS, (1 << 0) | (1 << 1) // This tells GRUB to 1: load modules on page boundaries and 2: provide a memory map

// Multiboot checksum
.set MB_CHECKSUM, (0 - (MB_MAGIC + MB_FLAGS))

// Multiboot header
.section .multiboot
    .align 4 // ensures 4 bytes alignment
    .long MB_MAGIC
    .long MB_FLAGS
    .long MB_CHECKSUM

// Sets bss section, i.e. global vars initalised to 0
.section .bss
    // Sets up a 4 kb stack for the kernel c code
    .align 16
    stack_bottom:
        .skip 4096    
    stack_top:

// Assembly code loading the kernel code
.section .text
    start:
        // sets correct stack pointer (x86 stack grows downward)
        mov $stack_top, %esp

        // calls the kernel main function
        call kernel_main

		// If, by some mysterious circumstances, the kernel's C code ever returns, all we want to do is to hang the CPU
        hang:
            cli         // disable interrupts
            hlt         // halt cpu
            jmp hang    // retry on failure
             